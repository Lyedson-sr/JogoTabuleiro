mport javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextInputDialog;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import java.util.*;

public class Main extends Application {

    private static final int BOARD_SIZE = 40;
    private static final int GRID_ROWS = 8;
    private static final int GRID_COLUMNS = 5;
    private List<Integer> playerPositions = new ArrayList<>();
    private List<Text> playerMarkers = new ArrayList<>();
    private GridPane grid;
    private Label diceValueLabel;
    private int currentPlayer = 0;
    private int numPlayers = 1;
    private List<Color> playerColors = Arrays.asList(Color.RED, Color.BLUE, Color.GREEN, Color.YELLOW, Color.PURPLE, Color.ORANGE); 

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Jogo de Tabuleiro");

        TextInputDialog dialog = new TextInputDialog("");
        dialog.setTitle("Number of Players");
        dialog.setHeaderText("Enter the number of players (1-6):");
        dialog.setContentText("Players:");

        Optional<String> result = dialog.showAndWait();
        result.ifPresent(num -> {
            numPlayers = Integer.parseInt(num);
            if (numPlayers < 1 || numPlayers > 6) {
                showAlert("Invalid number of players. Setting to 1 player.");
                numPlayers = 1;
            }
        });

        grid = new GridPane();
        grid.setAlignment(Pos.CENTER);
        grid.setHgap(5);
        grid.setVgap(5);

        for (int i = 0; i < GRID_ROWS; i++) {
            for (int j = 0; j < GRID_COLUMNS; j++) {
                Rectangle square = new Rectangle(50, 50);
                square.setFill(Color.GRAY);
                square.setStroke(Color.BLACK);
                grid.add(square, j, i);
            }
        }

        for (int i = 0; i < numPlayers; i++) {
            playerPositions.add(0);
            Text playerMarker = new Text("P" + (i + 1));
            playerMarker.setFill(playerColors.get(i));
            playerMarkers.add(playerMarker);
            grid.add(playerMarker, 0, 0);
        }

        diceValueLabel = new Label("Dice Value: ");

        Button rollButton = new Button("Roll Dice");
        rollButton.setOnAction(event -> movePlayer());

        HBox buttonBox = new HBox(10);
        buttonBox.setAlignment(Pos.CENTER);
        buttonBox.getChildren().addAll(diceValueLabel, rollButton);

        VBox root = new VBox();
        root.getChildren().addAll(grid, buttonBox);
        root.setAlignment(Pos.CENTER);
        root.setSpacing(20);
        root.setPadding(new Insets(20));

        Scene scene = new Scene(root, 400, 600);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void movePlayer() {
        Random random = new Random();
        int roll1 = random.nextInt(6) + 1;
        int roll2 = random.nextInt(6) + 1;
        int rollSum = roll1 + roll2;
        int newPosition = playerPositions.get(currentPlayer) + rollSum;

        if (newPosition >= BOARD_SIZE - 1) {
            newPosition = BOARD_SIZE - 1;
        }

        playerPositions.set(currentPlayer, newPosition);
        updatePlayerMarkers();

        diceValueLabel.setText("Dice Value: " + roll1 + " + " + roll2 + " = " + rollSum);

        // Verifique a condição de vitória após atualizar a posição e a interface do usuário
        if (newPosition == BOARD_SIZE - 1) {
            showAlert("Player " + (currentPlayer + 1) + " wins the game!");
        }

        currentPlayer = (currentPlayer + 1) % numPlayers;
    }

    private void updatePlayerMarkers() {
        grid.getChildren().removeAll(playerMarkers);
        Map<Integer, List<Text>> positionMap = new HashMap<>();

        for (int i = 0; i < numPlayers; i++) {
            int position = playerPositions.get(i);
            positionMap.putIfAbsent(position, new ArrayList<>());
            positionMap.get(position).add(playerMarkers.get(i));
        }

        for (Map.Entry<Integer, List<Text>> entry : positionMap.entrySet()) {
            int position = entry.getKey();
            List<Text> markers = entry.getValue();

            int row = position / GRID_COLUMNS;
            int col = position % GRID_COLUMNS;

            for (int i = 0; i < markers.size(); i++) {
                Text marker = markers.get(i);
                StackPane stack = new StackPane();
                stack.setAlignment(Pos.TOP_LEFT);
                stack.getChildren().add(marker);
                StackPane.setMargin(marker, new Insets(i * 10, 0, 0, i * 10)); // Ajuste os offsets para evitar sobreposição
                grid.add(stack, col, row);
            }
        }
    }

    private void showAlert(String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("Game Information");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}

